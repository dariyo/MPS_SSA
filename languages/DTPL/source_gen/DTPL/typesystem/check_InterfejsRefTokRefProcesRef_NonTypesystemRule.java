package DTPL.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class check_InterfejsRefTokRefProcesRef_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_InterfejsRefTokRefProcesRef_NonTypesystemRule() {
  }
  public void applyRule(final SNode interfejsRefTokRefProcesRef, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode node_dtpep = (SNode) SNodeOperations.getParent(interfejsRefTokRefProcesRef);
    int br_pojavljivanja = 0;
    for (SNode node_irtrpr : SLinkOperations.getChildren(node_dtpep, MetaAdapterFactory.getContainmentLink(0x4fade4743af4300L, 0xad5bb5d24df72c43L, 0x2c5a37ebd02dce72L, 0x2c5a37ebd02f0979L, "in_interfejs_tok_podataka_proces"))) {
      if ((SLinkOperations.getTarget(node_irtrpr, MetaAdapterFactory.getReferenceLink(0x4fade4743af4300L, 0xad5bb5d24df72c43L, 0x2c5a37ebd0306fd6L, 0x2c5a37ebd0306fdbL, "tok_podataka_ref")) != null) && isNotEmptyString(SPropertyOperations.getString(SLinkOperations.getTarget(node_irtrpr, MetaAdapterFactory.getReferenceLink(0x4fade4743af4300L, 0xad5bb5d24df72c43L, 0x2c5a37ebd0306fd6L, 0x2c5a37ebd0306fdbL, "tok_podataka_ref")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))) {
        if (SPropertyOperations.getString(SLinkOperations.getTarget(node_irtrpr, MetaAdapterFactory.getReferenceLink(0x4fade4743af4300L, 0xad5bb5d24df72c43L, 0x2c5a37ebd0306fd6L, 0x2c5a37ebd0306fdbL, "tok_podataka_ref")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")).equals(SPropertyOperations.getString(SLinkOperations.getTarget(interfejsRefTokRefProcesRef, MetaAdapterFactory.getReferenceLink(0x4fade4743af4300L, 0xad5bb5d24df72c43L, 0x2c5a37ebd0306fd6L, 0x2c5a37ebd0306fdbL, "tok_podataka_ref")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))) {
          br_pojavljivanja = br_pojavljivanja + 1;
        }
      }
    }
    if (br_pojavljivanja > 1) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(interfejsRefTokRefProcesRef, "Ovaj tok se pojavljuje vise puta", "r:20c5195e-19a6-4b26-9fce-472e3335fbcc(DTPL.typesystem)", "3195928371522857326", null, errorTarget);
      }
    }

  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0x4fade4743af4300L, 0xad5bb5d24df72c43L, 0x2c5a37ebd0306fd6L, "DTPL.structure.InterfejsRefTokRefProcesRef");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
}
