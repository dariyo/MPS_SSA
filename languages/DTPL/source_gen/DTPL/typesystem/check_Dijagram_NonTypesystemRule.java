package DTPL.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class check_Dijagram_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_Dijagram_NonTypesystemRule() {
  }
  public void applyRule(final SNode dijagram, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    {
      final SNode node_d = SNodeOperations.getParent(dijagram);
      if (SNodeOperations.isInstanceOf(node_d, MetaAdapterFactory.getConcept(0x4fade4743af4300L, 0xad5bb5d24df72c43L, 0x2c5a37ebd02b9082L, "DTPL.structure.Dijagram"))) {
        int broj_ponavljanja = 0;
        for (SNode node_dkp : ListSequence.fromList(SLinkOperations.getChildren(node_d, MetaAdapterFactory.getContainmentLink(0x4fade4743af4300L, 0xad5bb5d24df72c43L, 0x2c5a37ebd02b9082L, 0x8aa98186eb25f73L, "dijagrami_dekompozicije_list")))) {
          if ((SLinkOperations.getTarget(node_dkp, MetaAdapterFactory.getReferenceLink(0x4fade4743af4300L, 0xad5bb5d24df72c43L, 0x2c5a37ebd02b9082L, 0x2c5a37ebd02d4604L, "koji_se_dekomponuje_proces_ref")) != null) && isNotEmptyString(SPropertyOperations.getString(SLinkOperations.getTarget(node_dkp, MetaAdapterFactory.getReferenceLink(0x4fade4743af4300L, 0xad5bb5d24df72c43L, 0x2c5a37ebd02b9082L, 0x2c5a37ebd02d4604L, "koji_se_dekomponuje_proces_ref")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))) {
            if (SPropertyOperations.getString(SLinkOperations.getTarget(node_dkp, MetaAdapterFactory.getReferenceLink(0x4fade4743af4300L, 0xad5bb5d24df72c43L, 0x2c5a37ebd02b9082L, 0x2c5a37ebd02d4604L, "koji_se_dekomponuje_proces_ref")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")).equals(SPropertyOperations.getString(SLinkOperations.getTarget(dijagram, MetaAdapterFactory.getReferenceLink(0x4fade4743af4300L, 0xad5bb5d24df72c43L, 0x2c5a37ebd02b9082L, 0x2c5a37ebd02d4604L, "koji_se_dekomponuje_proces_ref")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))) {
              broj_ponavljanja++;
            }
          }

        }

        if (broj_ponavljanja > 1) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(dijagram, "Vec postoji dekompozicija izabranog procesa", "r:20c5195e-19a6-4b26-9fce-472e3335fbcc(DTPL.typesystem)", "1590574671094374629", null, errorTarget);
          }
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0x4fade4743af4300L, 0xad5bb5d24df72c43L, 0x2c5a37ebd02b9082L, "DTPL.structure.Dijagram");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
}
